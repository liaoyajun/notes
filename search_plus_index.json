{"./":{"url":"./","title":"简介","keywords":"","body":"Introduction liaoyajun            updated 2023-12-12 10:14:33 "},"front-end/":{"url":"front-end/","title":"前端","keywords":"","body":"前端 liaoyajun            updated 2023-12-12 10:14:33 "},"front-end/basic/":{"url":"front-end/basic/","title":"基础","keywords":"","body":"基础 liaoyajun            updated 2023-12-12 10:14:33 "},"front-end/basic/html/":{"url":"front-end/basic/html/","title":"html","keywords":"","body":"html liaoyajun            updated 2023-12-12 10:14:33 "},"front-end/basic/css/":{"url":"front-end/basic/css/","title":"css","keywords":"","body":"css liaoyajun            updated 2023-12-12 10:14:33 "},"front-end/basic/js/":{"url":"front-end/basic/js/","title":"js","keywords":"","body":"js liaoyajun            updated 2023-12-12 10:14:33 "},"back-end/":{"url":"back-end/","title":"后端","keywords":"","body":"后端 liaoyajun            updated 2023-12-12 10:14:33 "},"server/":{"url":"server/","title":"服务器","keywords":"","body":"服务器 liaoyajun            updated 2023-12-12 10:14:33 "},"server/Ubuntu 使用技巧.html":{"url":"server/Ubuntu 使用技巧.html","title":"Ubuntu 使用技巧","keywords":"","body":"Ubuntu 使用技巧 终端指令 常用指令 更新包缓存（可以知道包的哪些版本可以被安装或升级） sudo apt update 根据本地包缓存的数据，安装可升级包的最新版本 sudo apt upgrade 删除所有的软件安装包 sudo apt clean 删除不再可用的软件安装包 sudo apt autoclean 删除不再需要的依赖软件包 sudo apt autoremove 删除特定软件 sudo apt remove 软件名 删除软件残余 sudo apt purge 软件名 安装 nodejs 和 npm ```bash sudo apt install nodejs npm ``` 打开终端历史命令行自动补全功能 打开配置文件 /etc/inputrc 取消这两行注释，重启终端 # alternate mappings for \"page up\" and \"page down\" to search the history \"\\e[5~\": history-search-backward \"\\e[6~\": history-search-forward 其他 apt 和 apt-get 区别：apt 是 apt-get 命令的一个更新而更简单的版本，一般情况下使用 apt 交互更好更方便 liaoyajun            updated 2023-12-12 10:14:33 "},"others/":{"url":"others/","title":"其他","keywords":"","body":"其他 liaoyajun            updated 2023-12-12 10:14:33 "},"others/git/":{"url":"others/git/","title":"git","keywords":"","body":"git liaoyajun            updated 2023-12-12 10:14:33 "},"others/git/gitbook + git pages + git actions 实现自动化部署笔记.html":{"url":"others/git/gitbook + git pages + git actions 实现自动化部署笔记.html","title":"gitbook + git pages + git actions 实现自动化部署笔记","keywords":"","body":"gitbook + git pages + git actions 实现自动化部署笔记 gitbook 部分 切换 node 版本到 node/12.16.3 ，最新的不支持 sudo n i 12.16.3 安装 gitbook-cli sudo npm i gitbook-cli -g 创建 gitbook gitbook init notes 初始化 gitbook 修改目录文件 SUMMARY.md # Summary * [简介](README.md) * [前端](front-end/README.md) * [基础](front-end/basic/README.md) * [html](front-end/basic/html/README.md) * [css](front-end/basic/css/README.md) * [js](front-end/basic/js/README.md) * [后端](back-end/README.md) * [其他](others/README.md) * [git](others/git/README.md) * [gitbook + git pages + git actions 实现自动化部署笔记](others/git/gitbook + git pages + git actions 实现自动化部署笔记.md) 执行 gitbook init ，将根据 SUMMARY.md 自动创建 markdown 文件 cd notes gitbook init 添加自定义样式 /*新建文件styles/customize.css*/ /*隐藏 Published with GitBook*/ .gitbook-link { display: none !important; } /*隐藏右上角分享*/ .pull-right.js-toolbar-action { display: none !important; } /*隐藏上一页下一页*/ .navigation { display: none !important; } 配置插件 // 新建文件book.json { \"title\": \"notes\", \"links\": { \"sidebar\": { \"github\": \"https://github.com/liaoyajun\" } }, \"styles\": { \"website\": \"styles/customize.css\" }, \"plugins\" : [ \"anchor-navigation-ex\", // 序号/悬浮目录/回到顶部 \"code\", // 复制代码按钮 \"editlink\", // 编辑按钮 \"expandable-chapters-small\", // 折叠侧边栏菜单 \"page-footer-ex\", // 定制每篇文章的页脚 \"prism\", // 代码高亮 \"-highlight\", \"search-pro\", // 支持中文内容搜索 \"-search\", \"-lunr\", \"splitter\", // 自由调节侧边栏的宽度 \"-sharing\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": true }, \"editlink\": { \"base\": \"https://github.com/liaoyajun/notes/tree/main/\", \"label\": \"Edit This Page\" }, \"page-footer-ex\": { \"copyright\": \"[liaoyajun](https://github.com/liaoyajun)\", \"markdown\": true, \"update_label\": \"updated\", \"update_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"prism\": { \"css\": [\"prismjs/themes/prism-okaidia.css\"], \"lang\": {\"flow\": \"typescript\"} } }, \"ignores\" : [\"_book\", \"node_modules\"] } # 安装依赖 gitbook install 本地运行 gitbook serve 打包 gitbook build git actions 部分 创建 yml 文件 # .github/workflows/gitbook.yml name: GitBook Deploy on: push: branches: [ \"main\" ] jobs: build: runs-on: ubuntu-latest steps: - name: Setup Node.js uses: actions/setup-node@v1 with: node-version: '12.16.3' - name: Log Env run: node -v - name: Checkout uses: actions/checkout@v3 - name: Install GitBook CLI run: npm install gitbook-cli -g - name: Install GitBook Plugins run: gitbook install - name: Build run: gitbook build - name: Deploy uses: JamesIves/github-pages-deploy-action@releases/v4 with: branch: gh-pages folder: _book git pages 部分 创建公开仓库，如 notes 设置 actions 权限，仓库 - Settings - Actions - General 地址 Fork pull request workflows from outside collaborators 设置为 Require approval for first-time contributors who are new to GitHub Workflow permissions 设置为 Read and write permissions ，并勾选 Allow GitHub Actions to create and approve pull requests 提交一次代码 设置 github pages，仓库 - Settings - Pages Source 选择 Deploy from a branch Branch 选择 gh-pages 保存之后，会执行 pages build and deployment Actions，执行完成之后，即可访问 常见问题 报错 Failed to load prism syntax: yml 解决办法：代码块类型声明错误导致无法解析，将 yml 改成 yaml 即可 警告 warn: \"options\" property is deprecated, use config.get(key) instead warn: \"options.generator\" property is deprecated, use \"output.name\" instead 解决办法：打开文件 .node_modules/gitbook-plugin-prism/index.js ，将 (book.options && book.options.generator) 修改为 (/^2+\\.\\d+\\.\\d+$/.test(book.gitbook.version)) liaoyajun            updated 2023-12-12 10:14:33 "}}